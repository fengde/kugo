// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: {{template}}.proto

package {{template}}

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	{{Template}}_Ping_FullMethodName = "/{{template}}.{{Template}}/Ping"
)

// {{Template}}Client is the client API for {{Template}} service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type {{Template}}Client interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type {{template}}Client struct {
	cc grpc.ClientConnInterface
}

func New{{Template}}Client(cc grpc.ClientConnInterface) {{Template}}Client {
	return &{{template}}Client{cc}
}

func (c *{{template}}Client) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, {{Template}}_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// {{Template}}Server is the server API for {{Template}} service.
// All implementations must embed Unimplemented{{Template}}Server
// for forward compatibility
type {{Template}}Server interface {
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplemented{{Template}}Server()
}

// Unimplemented{{Template}}Server must be embedded to have forward compatible implementations.
type Unimplemented{{Template}}Server struct {
}

func (Unimplemented{{Template}}Server) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (Unimplemented{{Template}}Server) mustEmbedUnimplemented{{Template}}Server() {}

// Unsafe{{Template}}Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to {{Template}}Server will
// result in compilation errors.
type Unsafe{{Template}}Server interface {
	mustEmbedUnimplemented{{Template}}Server()
}

func Register{{Template}}Server(s grpc.ServiceRegistrar, srv {{Template}}Server) {
	s.RegisterService(&{{Template}}_ServiceDesc, srv)
}

func _{{Template}}_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.({{Template}}Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: {{Template}}_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.({{Template}}Server).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// {{Template}}_ServiceDesc is the grpc.ServiceDesc for {{Template}} service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var {{Template}}_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "{{template}}.{{Template}}",
	HandlerType: (*{{Template}}Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _{{Template}}_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "{{template}}.proto",
}
