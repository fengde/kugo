// Code generated by goctl. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wxWjsqzUserFieldNames          = builder.RawFieldNames(&WxWjsqzUser{})
	wxWjsqzUserRows                = strings.Join(wxWjsqzUserFieldNames, ",")
	wxWjsqzUserRowsExpectAutoSet   = strings.Join(stringx.Remove(wxWjsqzUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	wxWjsqzUserRowsWithPlaceHolder = strings.Join(stringx.Remove(wxWjsqzUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	wxWjsqzUserModel interface {
		Insert(ctx context.Context, data *WxWjsqzUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WxWjsqzUser, error)
		FindOneByIdIdentidOpenid(ctx context.Context, id int64, identid string, openid string) (*WxWjsqzUser, error)
		Update(ctx context.Context, data *WxWjsqzUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWxWjsqzUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WxWjsqzUser struct {
		Id                int64     `db:"id"`                   // 主键
		Identid           string    `db:"identid"`              // 游戏标识
		Openid            string    `db:"openid"`               // 用户唯一标识[openid]
		DeviceId          string    `db:"device_id"`            // 设备id
		Userid            string    `db:"userid"`               // 平台用户id
		Uuid              int64     `db:"uuid"`                 // 用户uuid
		Nickname          string    `db:"nickname"`             // 用户昵称
		Gender            int64     `db:"gender"`               // 用户性别[1:男,2:女]
		Avatar            string    `db:"avatar"`               // 用户头像地址
		Headpic           int64     `db:"headpic"`              // 头像id
		UserType          string    `db:"user_type"`            // 用户分类
		PayAmount         float64   `db:"pay_amount"`           // 累计充值金额
		PayTotal          int64     `db:"pay_total"`            // 累计充值次数
		AdTotal           int64     `db:"ad_total"`             // 累计看广告次数
		InviteTotal       int64     `db:"invite_total"`         // 累计邀请人数
		AddTime           time.Time `db:"add_time"`             // 注册时间
		LastTime          time.Time `db:"last_time"`            // 最后登录时间
		AddDate           time.Time `db:"add_date"`             // 注册日期
		LoginNum          int64     `db:"login_num"`            // 登录次数
		LoginDay          int64     `db:"login_day"`            // 登录天数
		Ip                string    `db:"ip"`                   // 登录IP
		FirstIp           string    `db:"first_ip"`             // 初始ip
		ClueToken         string    `db:"clue_token"`           // token
		Channel           string    `db:"channel"`              // 广告渠道
		AdvertiserId      string    `db:"advertiser_id"`        // 广告主id
		GroupId           string    `db:"group_id"`             // 广告组id
		AdId              string    `db:"ad_id"`                // 计划id
		AdName            string    `db:"ad_name"`              // 计划名称
		CreativeId        string    `db:"creative_id"`          // 创意id
		RequestId         string    `db:"request_id"`           // 请求id
		IsActive          int64     `db:"is_active"`            // 是否激活[0否|1是]
		Scene             string    `db:"scene"`                // 场景值
		Version           string    `db:"version"`              // 版本号
		UserData          string    `db:"user_data"`            // 其他信息 json
		GameData          string    `db:"game_data"`            // 游戏数据 json
		UpdateTime        time.Time `db:"update_time"`          // 最后更新时间
		CreateTime        time.Time `db:"create_time"`          // 插入时间
		Operator          int64     `db:"operator"`             // 操作人id
		IsShielded        int64     `db:"is_shielded"`          // 屏蔽状态[0未屏蔽|1屏蔽]
		IsWhiteList       int64     `db:"is_white_list"`        // 白名单状态[0普通状态|1白名单状态]
		LastWhiteListTime int64     `db:"last_white_list_time"` // 最后修改白名单时间
		IsForbid          int64     `db:"is_forbid"`            // 是否禁止、拉黑[0否，1是]
	}
)

func newWxWjsqzUserModel(conn sqlx.SqlConn) *defaultWxWjsqzUserModel {
	return &defaultWxWjsqzUserModel{
		conn:  conn,
		table: "`wx_wjsqz_user`",
	}
}

func (m *defaultWxWjsqzUserModel) withSession(session sqlx.Session) *defaultWxWjsqzUserModel {
	return &defaultWxWjsqzUserModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`wx_wjsqz_user`",
	}
}

func (m *defaultWxWjsqzUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWxWjsqzUserModel) FindOne(ctx context.Context, id int64) (*WxWjsqzUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wxWjsqzUserRows, m.table)
	var resp WxWjsqzUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWxWjsqzUserModel) FindOneByIdIdentidOpenid(ctx context.Context, id int64, identid string, openid string) (*WxWjsqzUser, error) {
	var resp WxWjsqzUser
	query := fmt.Sprintf("select %s from %s where `id` = ? and `identid` = ? and `openid` = ? limit 1", wxWjsqzUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, identid, openid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWxWjsqzUserModel) Insert(ctx context.Context, data *WxWjsqzUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, wxWjsqzUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Identid, data.Openid, data.DeviceId, data.Userid, data.Uuid, data.Nickname, data.Gender, data.Avatar, data.Headpic, data.UserType, data.PayAmount, data.PayTotal, data.AdTotal, data.InviteTotal, data.AddTime, data.LastTime, data.AddDate, data.LoginNum, data.LoginDay, data.Ip, data.FirstIp, data.ClueToken, data.Channel, data.AdvertiserId, data.GroupId, data.AdId, data.AdName, data.CreativeId, data.RequestId, data.IsActive, data.Scene, data.Version, data.UserData, data.GameData, data.Operator, data.IsShielded, data.IsWhiteList, data.LastWhiteListTime, data.IsForbid)
	return ret, err
}

func (m *defaultWxWjsqzUserModel) Update(ctx context.Context, newData *WxWjsqzUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wxWjsqzUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Identid, newData.Openid, newData.DeviceId, newData.Userid, newData.Uuid, newData.Nickname, newData.Gender, newData.Avatar, newData.Headpic, newData.UserType, newData.PayAmount, newData.PayTotal, newData.AdTotal, newData.InviteTotal, newData.AddTime, newData.LastTime, newData.AddDate, newData.LoginNum, newData.LoginDay, newData.Ip, newData.FirstIp, newData.ClueToken, newData.Channel, newData.AdvertiserId, newData.GroupId, newData.AdId, newData.AdName, newData.CreativeId, newData.RequestId, newData.IsActive, newData.Scene, newData.Version, newData.UserData, newData.GameData, newData.Operator, newData.IsShielded, newData.IsWhiteList, newData.LastWhiteListTime, newData.IsForbid, newData.Id)
	return err
}

func (m *defaultWxWjsqzUserModel) tableName() string {
	return m.table
}
